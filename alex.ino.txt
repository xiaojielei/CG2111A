#include <serialize.h>
#include <stdarg.h>
#include "packet.h"
#include "constants.h"
#include <math.h>
#include <Servo.h>

#define S0 48
#define S1 38
#define S2 52
#define S3 40
#define OUT 21  

Servo servo1, servo2;

volatile TDirection dir; 

/*
 * Alex's configuration constants
 */

// Number of ticks per revolution from the 
// wheel encoder.

#define COUNTS_PER_REV      1

// Wheel circumference in cm.
// We will use this to calculate forward/backward distance traveled 
// by taking revs * WHEEL_CIRC

#define WHEEL_CIRC          1
//#define PI 3.1415926

#define ALEX_LENGTH 22.5
#define ALEX_BREADTH 14.5

float alexDiagonal = 0.0;
float alexCirc = 0.0;
/*
 *    Alex's State Variables
 */

// Store the ticks from Alex's left and
// right encoders.
volatile unsigned long leftForwardTicks; 
volatile unsigned long rightForwardTicks;
volatile unsigned long leftReverseTicks;
volatile unsigned long rightReverseTicks;

volatile unsigned long leftForwardTicksTurns; 
volatile unsigned long rightForwardTicksTurns;
volatile unsigned long leftReverseTicksTurns;
volatile unsigned long rightReverseTicksTurns;


// Store the revolutions on Alex's left
// and right wheels
volatile unsigned long leftRevs;
volatile unsigned long rightRevs;

// Forward and backward distance traveled
volatile unsigned long forwardDist;
volatile unsigned long reverseDist;

//variables to keep track of whether we've moved a command distance
unsigned long deltaDist;
unsigned long newDist;

unsigned long deltaTicks;
unsigned long targetTicks;

// New function to estimate number of wheel ticks
// needed to turn an angle
unsigned long computeDeltaTicks(float ang)
{
    // We will assume that angular distance moved = linear distance moved in one wheel
    // revolution. This is (probably) incorrect but simplifies calculation.
    // # of wheel revs to make one full 360 turn is vincentCirc / WHEEL_CIRC
    // This is for 360 degrees. For ang degrees it will be (ang * vincentCirc) / (360 * WHEEL_CIRC)
    // To convert to ticks, we multiply by COUNTS_PER_REV.

    unsigned long ticks = (unsigned long) ((ang * alexCirc * COUNTS_PER_REV) / (360.0 * WHEEL_CIRC));

    return ticks;
}


void left(float ang, float speed) {
  if(ang == 0)
deltaTicks=99999999;
else
deltaTicks=computeDeltaTicks(ang);
targetTicks = leftReverseTicksTurns + deltaTicks;
  ccw(ang, speed);
}

void right(float ang, float speed) {
  if(ang == 0)
deltaTicks=99999999;
else
deltaTicks=computeDeltaTicks(ang);
targetTicks = rightReverseTicksTurns + deltaTicks;
  cw(ang, speed);
}

/*
 * 
 * Alex Communication Routines.
 * 
 */
 
TResult readPacket(TPacket *packet)
{
    // Reads in data from the serial port and
    // deserializes it.Returns deserialized
    // data in "packet".
    
    char buffer[PACKET_SIZE];
    int len;

    len = readSerial(buffer);

    if(len == 0)
      return PACKET_INCOMPLETE;
    else
      return deserialize(buffer, len, packet);
    
}

void sendStatus()
{
  TPacket statusPacket;
  statusPacket.packetType = PACKET_TYPE_RESPONSE;
  statusPacket.command = RESP_STATUS;

  statusPacket.params[0] = leftForwardTicks;
  statusPacket.params[1] = rightForwardTicks;
  statusPacket.params[2] = leftReverseTicks;
  statusPacket.params[3] = rightReverseTicks;
  statusPacket.params[4] = leftForwardTicksTurns;
  statusPacket.params[5] = rightForwardTicksTurns;
  statusPacket.params[6] = leftReverseTicksTurns;
  statusPacket.params[7] = rightReverseTicksTurns;
  statusPacket.params[8] = forwardDist;
  statusPacket.params[9] = reverseDist;

  sendResponse(&statusPacket);
}


void sendMessage(const char *message)
{
  // Sends text messages back to the Pi. Useful
  // for debugging.
  
  TPacket messagePacket;
  messagePacket.packetType=PACKET_TYPE_MESSAGE;
  strncpy(messagePacket.data, message, MAX_STR_LEN);
  sendResponse(&messagePacket);
}
void dbprintf(char *format, ...) { 
va_list args; 
char buffer[128]; 
va_start(args, format); 
vsprintf(buffer, format, args); 
sendMessage(buffer);  
}

void sendBadPacket()
{
  // Tell the Pi that it sent us a packet with a bad
  // magic number.
  
  TPacket badPacket;
  badPacket.packetType = PACKET_TYPE_ERROR;
  badPacket.command = RESP_BAD_PACKET;
  sendResponse(&badPacket);
  
}

void sendBadChecksum()
{
  // Tell the Pi that it sent us a packet with a bad
  // checksum.
  
  TPacket badChecksum;
  badChecksum.packetType = PACKET_TYPE_ERROR;
  badChecksum.command = RESP_BAD_CHECKSUM;
  sendResponse(&badChecksum);  
}

void sendBadCommand()
{
  // Tell the Pi that we don't understand its
  // command sent to us.
  
  TPacket badCommand;
  badCommand.packetType=PACKET_TYPE_ERROR;
  badCommand.command=RESP_BAD_COMMAND;
  sendResponse(&badCommand);
}

void sendBadResponse()
{
  TPacket badResponse;
  badResponse.packetType = PACKET_TYPE_ERROR;
  badResponse.command = RESP_BAD_RESPONSE;
  sendResponse(&badResponse);
}

void sendOK()
{
  TPacket okPacket;
  okPacket.packetType = PACKET_TYPE_RESPONSE;
  okPacket.command = RESP_OK;
  sendResponse(&okPacket);  
}

void sendResponse(TPacket *packet)
{
  // Takes a packet, serializes it then sends it out
  // over the serial port.
  char buffer[PACKET_SIZE];
  int len;

  len = serialize(buffer, packet, sizeof(TPacket));
  writeSerial(buffer, len);
}


/*
 * Setup and start codes for external interrupts and 
 * pullup resistors.
 * 
 */
// Enable pull up resistors on pins 18 and 19
void enablePullups()
{
  // Use bare-metal to enable the pull-up resistors on pins
  // 19 and 18. These are pins PD2 and PD3 respectively.
  // We set bits 2 and 3 in DDRD to 0 to make them inputs. 
      // Set PD2 (pin 18) and PD3 (pin 19) as inputs
      DDRD &= 0b11110011;
      PORTD |= 0b00001100;
}

// Functions to be called by INT2 and INT3 ISRs.
void leftISR() {
  if (dir == FORWARD) {
    leftForwardTicks++;
    forwardDist = (unsigned long)((float)leftForwardTicks / COUNTS_PER_REV * WHEEL_CIRC);
  } else if (dir == BACKWARD) {
    leftReverseTicks++;
    reverseDist = (unsigned long)((float)leftReverseTicks / COUNTS_PER_REV * WHEEL_CIRC);
  } else if (dir == CCW) {
    leftReverseTicksTurns++;
  } else if (dir == CW) {
    leftForwardTicksTurns++;
  }
}


void rightISR() {
if (dir == FORWARD) {
  rightForwardTicks++;
} else if (dir == BACKWARD) {
  rightReverseTicks++;
} else if (dir == CCW) {
  rightForwardTicksTurns++;
} else if (dir == CW) {
  rightReverseTicksTurns++;
  }
}

// Set up the external interrupt pins INT2 and INT3
// for falling edge triggered. Use bare-metal.
void setupEINT()
{
  // Use bare-metal to configure pins 18 and 19 to be
  // falling edge triggered. Remember to enable
  // the INT2 and INT3 interrupts.
  // Hint: Check pages 110 and 111 in the ATmega2560 Datasheet.
    // Configure INT2 (PD2) and INT3 (PD3) for falling edge trigger
      EICRA = 0b10100000; 
      EIMSK = 0b00001100;

}

// Implement the external interrupt ISRs below.
// INT3 ISR should call leftISR while INT2 ISR
// should call rightISR.

// ISR for INT3 (PD3) - Increment leftTicks
ISR(INT3_vect) {
    leftISR();
}

// ISR for INT2 (PD2) - Increment rightTicks
ISR(INT2_vect) {
    rightISR();
}
// Implement INT2 and INT3 ISRs above.

/*
 * Setup and start codes for serial communications
 * 
 */
// Set up the serial connection. For now we are using 
// Arduino Wiring, you will replace this later
// with bare-metal code.
void setupSerial()
{
  // To replace later with bare-metal.
  Serial.begin(9600);
  // Change Serial to Serial2/Serial3/Serial4 in later labs when using the other UARTs
}

// Start the serial connection. For now we are using
// Arduino wiring and this function is empty. We will
// replace this later with bare-metal code.

void startSerial()
{
  // Empty for now. To be replaced with bare-metal code
  // later on.
  
}

// Read the serial port. Returns the read character in
// ch if available. Also returns TRUE if ch is valid. 
// This will be replaced later with bare-metal code.

int readSerial(char *buffer)
{

  int count=0;

  // Change Serial to Serial2/Serial3/Serial4 in later labs when using other UARTs

  while(Serial.available())
    buffer[count++] = Serial.read();

  return count;
}

// Write to the serial port. Replaced later with
// bare-metal code

void writeSerial(const char *buffer, int len)
{
  Serial.write(buffer, len);
  // Change Serial to Serial2/Serial3/Serial4 in later labs when using other UARTs
}

/*
 * Alex's setup and run codes
 * 
 */

// Clears all our counters
void clearCounters()
{
  leftRevs=0;
  rightRevs=0;
  forwardDist=0;
  reverseDist=0; 
  leftForwardTicks = 0;
  rightForwardTicks = 0;
  leftReverseTicks = 0;
  rightReverseTicks = 0;
  leftForwardTicksTurns = 0;
  rightForwardTicksTurns = 0;
  leftReverseTicksTurns = 0;
  rightReverseTicksTurns = 0;
}

// Clears one particular counter
void clearOneCounter(int which)
{
  clearCounters();
}
// Intialize Alex's internal states

void initializeState()
{
  clearCounters();
}

// Storesrequency read by the photodiodes
volatile unsigned int redFrequency = 0;
volatile unsigned int greenFrequency = 0;
volatile unsigned int blueFrequency = 0;

const int redMax = 95;
const int redMin = 70;
const int greenMax = 100;
const int greenMin =80;

void sendColor(){
  getColor();
  
  int mappedR = constrain(map(redFrequency, redMax, redMin, 0, 255), 0, 255);
  int mappedG = constrain(map(greenFrequency, greenMax, greenMin, 0, 255), 0, 255);
  
  TPacket colourPacket;
  colourPacket.packetType = PACKET_TYPE_RESPONSE;
  colourPacket.command = RESP_COLOUR;
  colourPacket.params[0] = mappedR;
  colourPacket.params[1] = mappedG;
  
  char buffer[64];  
  sprintf(buffer, "RGB after calibration: %d, %d\n", mappedR, mappedG);
  dbprintf(buffer);
  
  sendResponse(&colourPacket);
}

void openClaw() {
    servo1.write(90);
    servo2.write(0);
}

void closeClaw() {
    servo1.write(0);
    servo2.write(90);
} 

unsigned long targetTime;

void handleCommand(TPacket *command)
{
  switch(command->command)
  {
    case COMMAND_OPEN_CLAW:
        sendOK();
        openClaw();
        break;
    case COMMAND_CLOSE_CLAW:
        sendOK();
        closeClaw();
        break;
    case COMMAND_GET_COLOUR:
        sendOK();
        sendColor();
      break;
//     For movement commands, param[0] = distance, param[1] = speed.
    case COMMAND_FORWARD:
        sendOK();
        forward((double) command->params[0], (float) command->params[1]);
      break;

    case COMMAND_REVERSE:
        sendOK();
        backward((double) command->params[0], (float) command->params[1]);
      break;

    case COMMAND_TURN_LEFT:
        sendOK();
        left((double) command->params[0], (float) command->params[1]);
      break;

    case COMMAND_TURN_RIGHT:
        sendOK();
        right((double) command->params[0], (float) command->params[1]);
      break;

    case COMMAND_STOP:
        sendOK();
        stop();
      break;
      
    case COMMAND_GET_STATS:
        sendStatus();
      break;

    case COMMAND_CLEAR_STATS:
        clearOneCounter(command->params[0]);
        sendOK();
      break;
    
    default:
      sendBadCommand();
  }
}

void waitForHello()
{
  int exit=0;

  while(!exit)
  {
    TPacket hello;
    TResult result;
    
    do
    {
      result = readPacket(&hello);
    } while (result == PACKET_INCOMPLETE);

    if(result == PACKET_OK)
    {
      if(hello.packetType == PACKET_TYPE_HELLO)
      {
     

        sendOK();
        exit=1;
      }
      else
        sendBadResponse();
    }
    else
      if(result == PACKET_BAD)
      {
        sendBadPacket();
      }
      else
        if(result == PACKET_CHECKSUM_BAD)
          sendBadChecksum();
  } // !exit
}



void handlePacket(TPacket *packet)
{
  switch(packet->packetType)
  {
    case PACKET_TYPE_COMMAND:
      handleCommand(packet);
      break;

    case PACKET_TYPE_RESPONSE:
      break;

    case PACKET_TYPE_ERROR:
      break;

    case PACKET_TYPE_MESSAGE:
      break;

    case PACKET_TYPE_HELLO:
      break;
  }
}

void handleSerial() {
    TPacket recvPacket; // This holds commands from the Pi

  TResult result = readPacket(&recvPacket);
  
  if(result == PACKET_OK)
    handlePacket(&recvPacket);
  else
    if(result == PACKET_BAD)
    {
      sendBadPacket();
    }
    else
      if(result == PACKET_CHECKSUM_BAD)
      {
        sendBadChecksum();
      }

}

void handleMovement() {
        if(deltaDist > 0)
{
if(dir==FORWARD)
{
if(forwardDist > newDist)
{
deltaDist=0;
newDist=0;
stop();
}
}
else
if(dir == BACKWARD)
{
if(reverseDist > newDist)
{
deltaDist=0;
newDist=0;
stop();
}
}
else if(dir == STOP)
{
deltaDist=0;
newDist=0;
stop();
}
}
}

void handleRotation() {
  
  if(deltaTicks > 0)
{
    if(dir == LEFT)
    {
        if(leftReverseTicksTurns >= targetTicks)
        {
            deltaTicks=0;
            targetTicks = 0;
            stop();
        }
    }
    else if(dir == RIGHT)
    {
        if(rightReverseTicksTurns >= targetTicks)
        {
            deltaTicks=0;
            targetTicks=0;
            stop();
        }
    }
    else
      if(dir == STOP) {
         deltaTicks=0;
         targetTicks=0;
         stop();
     }
    }
}

void colorSetup() {
    // Servo setup
    servo1.attach(50);
    servo2.attach(30);
    servo1.write(90);  // Start at center position
    servo2.write(90);

    // Color sensor setup
    pinMode(S0, OUTPUT);
    pinMode(S1, OUTPUT);
    pinMode(S2, OUTPUT);
    pinMode(S3, OUTPUT);
    pinMode(OUT, INPUT);
    
    digitalWrite(S0, HIGH);
    digitalWrite(S1, LOW); // 20% scaling
    
    Serial.begin(9600);
}

void getColor() {
    digitalWrite(S2, LOW);
    digitalWrite(S3, LOW);
    redFrequency = pulseIn(OUT, LOW);
    char buffer[64];  
    sprintf(buffer, "redFrequency: %d\n", redFrequency);
    dbprintf(buffer);

      
    digitalWrite(S2, HIGH);
    digitalWrite(S3, HIGH);
    greenFrequency = pulseIn(OUT, LOW);
    buffer[64] = 0;
    sprintf(buffer, "greenFrequency: %d\n", greenFrequency);
    dbprintf(buffer); 
}

void setup() {
  // put your setup code here, to run once:
  alexDiagonal = sqrt((ALEX_LENGTH * ALEX_LENGTH) + (ALEX_BREADTH *
ALEX_BREADTH));
alexCirc = PI * alexDiagonal;

  cli();
  setupEINT();
  setupSerial();
  startSerial();
  enablePullups();
  initializeState();
  colorSetup();
  sei();
}

void loop() {
 


 // put your main code here, to run repeatedly:
    handleSerial();       
    handleMovement();       
    handleRotation(); 

}